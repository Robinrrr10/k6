

K6 Tutorial
------------
------------
------------


https://www.youtube.com/playlist?list=PLJ9A48W0kpRJKmVeurt7ltKfrOdr8ZBdt

K6 documentation link:
https://k6.io/docs/



Tutorial 1: Getting started with k6
------------------------------------
K6 is the open source load testing tool
its also called as load impact
K6 is internally written in go language and we can use javascript for writing test cases

We have two flavor of k6
1. opensource - https://github.com/grafana/k6   - complete free
2. cloud - https://k6.io - its commercial   - free for few days (tair)


We can install k6 in linux, windows, mac or using docker



Simple Example(hello.js):

import http from 'k6/http'
import { sleep } from 'k6'

export default function() {              
	http.get('http://test.k6.io');
	sleep(1)
}


We can write any load testing using javascript
It supports recording. We can record in chrome browser using the extension and we can use in k6
It has CLI. So that we can integrate in cicd using the command
It support multiple protocol
It support multiple integration like grafana and other etc
If need we can scale using k6 cloud




To run the test:
k6 run filename.js

Eg:
k6 run hello.js


It will run the performance test and give the results



k6 version       - This will show the version

k6 help          - this will show available commands of k6 and its flags



In below path we can see the global level configuration

C:/Users/<username>/AppData/Roaming/loadimpact/k6/config.json

For mac
/Users/username/Library/Application Support/loadimpact/k6/config.json
Eg:
/Users/qqa0400/Library/Application Support/loadimpact/k6/config.json

or

/User/<username>/



Example(hello.js):

import http from 'k6/http'
import { sleep } from 'k6'

export let options = {        //In options we will mension about duration, users, threshold conditions etc and more config etc
	vus: 5,      //this is number of users
	duration: '60s'     //This is duration of performance test
};

export default function() {       //What ever is inside default function, it will execute multiple times based on given options.
	let res = http.get('http://test.k6.io');
	console.log(res.status);      //to print the status code
	sleep(5);
}


Run using below command
k6 run hello.js



If we need we can give options like below


export let options = {
	stages: [
		{duration: '5s', target: 1},
		{duration: '10s', target: 3},
		{duration: '5s', target: 1},
	],
	thresholds: {
		http_req_duration: ['p(99) < 1000']         //Here we are giving condition to check that 99th percentile should be less than 1 sec. if not it will fail
	}
}


we can also use below function inside defaul function to validation or to check

let response = http.get('https://myapi.com');
check(response, {
	'status is 200': (r) => r.status ===200,            //This will check the status code is 200 or not
	'order complete check': (r) => r.html('h3').text().includes('Your order is completed!')        // this will check whether response contains this string or not
})


For running in cloud we need to get the token from the k6 website and we need to config and then we can run using below commnad
k6 cloud filename.js        //This will upload the javascript file to the cloud and run the execution execution in cloud and we will get the result

Eg:
k6 cloud hello.js

And in the website, we can see the running tests, apis, failures, average response time and more
We can able to compare the previous execution results as well
We can deeply look on the api's, failures, checks, request details, analysis, scripts, logs and more
K6 cloud provide lot of information to deep drive the analysis


------



Tutorial 2: Performance monitoring in netdata while running in k6
----------------------------------------------------------------------

netdata:
Netdata is one of open source monitoring tool
The setup of netdata is very easy. we can start with single command.
There are multiple metrics
We can get the metrics even for 1 sec
I need we can add alerts.
netdata can easily integrate with multiple tool.
We can use dashboard to monitor all the metrics

K6 can easily integrate with netdata tool.



K6:
It is open source performance testing tool.  In above tutorial it has more details


netadata installation steps:
We can get the installation command in below link
https://learn.netdata.cloud/docs/agent/packaging/installer

Eg:
wget -O /tmp/netdata-kickstart.sh https://my-netdata.io/kickstart.sh && sh /tmp/netdata-kickstart.sh
or
curl https://my-netdata.io/kickstart.sh > /tmp/netdata-kickstart.sh && sh /tmp/netdata-kickstart.sh

Netdata will run on the port 19999
you can use localhost:19999
You can check on the browser


k6 installation:
In below link we can find the k6 installation setup
https://k6.io/docs/get-started/installation/

brew install k6         //this is to install k6 in mac

type below command to check the version
k6 version



When running the performance testing include --out statsd to show the metrics in netdata. this will push the metrics to netdata using statsd

k6 run --out statsd filename.js
Eg:
k6 run --out statsd hello.js


There is a command to start/stop the netdata.


write one sample test like below(hello.js)

import http from 'k6/http'
import { sleep } from 'k6'

export default function() {
	http.get('http://test.k6.io');
	sleep(1)
}


and run using below command
k6 run --out stats hello.js

// This will run the test and also it will push the metrics data

Now we check on the localhost:19999 in browser, 
We can see k6 there
we can click the k6 and view all the metrics related to the performance test we ran


To modify anything related to k6 netdata go to /etc/netdata and modify below below
sudo ./edit-config statsd.d/k6/conf


----


Tutorial 3: Recording in k6 using browser extension
--------------------------------------
k6 browser extension is avaiable for chrome and firefox
To add the extension, go to chrome store
in search give k6 Browser Recorder
now add this extension.

//We should also have the account in k6 cloud. this is needed. its is not paid. just the signu is fine

After adding, we should able to see the its extension icon in right of search input
We can click on that extension icon to open the options
If need we can enable Download Har file. it is for downloading the har file(all network calls)
If need we can enable clear cache. This is clear the cache for last 7 days
If need we can enable correlated request and responst. This will map between request and response

To start recording, click start recording button. This will start the recording.
Now we can do the action which needs to be captured. It will capture all network calls when we do any action. While recording wait for complete page to be loaded
Once we done, then we can stop recording. This will automatically open in k6 cloud with recorded one

We can give any name for the recording script
We can give test builder or script editor. //Mostly we can go with script editor
If we want to correlated request and response, then we can check correlate request and response option. if not, we can leave it
enable/disable include static assert. this is for, whether we want to include static file or not. Eg: calling image, js file, css file, png, logo and more etc
Enable/disable generate sleep.
Enable/disable third party domain filtering. Whether we want to include thirdparty or not. Eg: googleapi, might be other domain etc. If we want to include, then we can check that domains, if not then dont check it
now click on save option.

Now it will open the recorded script. We can have a look. We can copy paste this recorded scipt and we can use it in our script. if we wanted to run on k6 cloud, then is also possible



-------------



Tutorial 4: Data parameterization
---------------------

We can read data from json or csv or faker liberary
We need to use SharedArray from k6

SharedArray is like a array which takes name and function
It is read only constructor. It is not possible to communite between VUs (virtual users)
we can use length or array[index] or for to iterate between shared array


Sample script to show how SharedArray works

import { SharedArray } from "k6/data";

var data = new SharedArray("colors", function() {
	return JSON.parse(open('./data.json')).tags;
});

export default () => {
	
}

SharedArray store in memory only once. whenever we request for test data, it will make a copy and give the data


Example with faker liberary:
import faker from https://cdn.jsdelivr.net/gh/Marak/faker.js@master/examples/browser/js/faker.js';

export default function() {
	
	console.log(faker.name.jobTitle());             //for every iteration the value of name will change
	console.log(faker.name.jobDescription());
	console.log(faker.name.jobArea());
	console.log(faker.name.jobType());
	
}



Example with json:
Below is the content of data.json file
{
	"tags": [
		"blue",
		"green",
		"red",
		"white"
	]
}

below is the contend of actual test file
import http from 'k6/http';
import { SharedArray } from 'k6/data';

export let options = {
	vus: 5,
	duration: 10s,
	iterations: 5
}

var data = new SharedArray("colors", function() {
	return JSON.parse(open('./data.json')).tags;
})

var randomTag = data[Math.floor(Math.random() * data.length)];

export default function() {
	let response = http.get('http://myapi.com?name=${randomTag}');
	console.log('VU ID: ${__VU}' + " - URL: " + response.url + " - status code: " + response.status);
}



Example with csv:
below is the content of data.csv file
username,password
ram,12345
babu,783433
Mali, 782322

Below is the content actual test file:
import { SharedArray } from 'k6/data';
import http from 'k6/http';
import papaparse from "https://jslib.k6.io/papaparse/5.1.1/index.js";
import encoding from 'k6/encoding'; //its for encoding. if encoding not needed, then we can remove all changes related to encoding

export let options = {
	vus: 5,
	duration: '5s',
	iterations: 5
}

const csvRead = new SharedArray('credentials', function(){
	return papaparse.parse(open('./data.csv'), {header: true}).data;
})

export default funtion() {
	var username = csvRead[Math.floor(Math.random() * csvRead.length)]['username'];
	var password = csvRead[Math.floor(Math.random() * csvRead.length)]['password'];

	var toBeEncoded = username + ':' + password;
	var encodedString = encoding.b64encode(toBeEncoded);

	let params = {
		headers : {
			'Authorization': 'Basic ' + encodedString;
			'X-Requested-With': 'XmlHttpRequest';
		}
	};

	let response = http.get("http://myapi.com/login", params);
	console.log('Logging in using user name: ' + username + ' password: ' + password + ' statuscode: ' + response.status);
}


----------------

Tutorial 5: Http methods
---------------------

We can call any http methods like get, post, put, patch, delete, options and others etc
We also have request() and batch() method
request() method will be used to call any type of method. we can send the method name in parameter
batch() is used to send multiple request at same time parallelly
k6 tag will be used to help to add the tag in result


To call get:
http.get('url')

To call post:
http.post('url', payload, headers)

Eg:
var response = http.post('http://myapi.com/api/user', JSON.stringify({"name":"ram","age":12}), headers: {"ContentType":"application/json"})
response.json().name   //This how we will read the value in body
response.status  //to get the status code
response.headers['Allow']  //To get header

Same goes for put, patch and other method as well


request() is used to call any http method
Eg:
let response = http.request('GET', 'https://myapi.com/fda?name=fda')  //We can pass any method name or params



To validate we can use check like below
check(response, {
	'is status code 204': (r) => r.status === 200
})





batch() - batch method is used to send multiple request parallelly
Example:
export default function() {
	let responses = http.batch([
		['GET', 'https://myapi.com/fda'],
		['GET', 'https://myapi.com/fda?name=hai'],
		['GET', 'https://myapi.com/style/main.css'],
		['GET', 'https://myapi.com/static/photo.jpg'],
		['GET', 'https://myapi.com/fda/dfafa/fdafa'],
	])
console.log(responses[0].status)   //using index value we can get the status code of particular api
for(let i=0; i<responses.length; i++){
	console.log(response[i].status)          //if need we can iterate like this
}



Example 2 for batch:
import http from 'k6/http';
import {check} from 'k6';

export let options = {
	batch: 5        //How many request should be called at a time in a batch. Default value is 20.
	batchPerHost: 3  //How many request should be called in a batch for same host. Default value is 6
}

export default function() {
	let req1 = {
		method: 'GET',
		url: "http://myapi.com/hai"
	};

	let req2 = {
		method: 'GET',
		url: "http://hey.com/nam"
	};

	let req3 = {
		method: 'GET',
		url: "http://goog.com/hai?nam=fda"
	};

	let response = http.batch([req1, req2, req3]);

	check(response[0], {
		'status code 200': (res) => res.status === 200
	})

	check(response[1], {
		'status created 201': (res) => res.status === 201
	})

	check(response[2], {
		'status delete 204': (res) => res.status === 204
	})	

}


Example of batch with name:
export default function() {
	let requests = {
		'get user': 'http://dcda.com/users'          //we can add the name for each request in a batch
		'get price details': {
			method: 'GET',
			url: 'http://fda.cdm/fda/fdafda'
		}
	}

	let responses = http.batch(requests);

	console.log(response['get user'].status)         //using the same name we can get the values
	console.log(response['get price details'].status)

}


-----------------


Tutorial 6: Check
------------------

Check is like assertion
check wont stop the test if it fails. it will store the result and give at the end
we can check anything in response eg: status code, value in body, json body, and any other



Example:
import http from 'k6/http'
import { check } from 'k6'

export default function() {
	let response = http.get('http://manjhkh.cd/iuhu/cda');

	check(response, {
		'validate status code 200': (r) => r.status === 200,         //to validate status
		'validate status code not 400': (r) => r.status !== 40,       //to validate status code not equals
		'validate age in body': (r) => (JSON.parse(r.body)).customer.age == "ram",     //to validate one value in json response
		'validate date size in body': (r) => (JSON.parse(r.body)).data.length > 0,    //to validate size of the array data in json body
		'validate body size less than 2000 byte': (r) => r.body.length <= 1030,      //to validate size of the body
		'validate body includes name': (r) => r.body.includes('name')               //to validate whether it has given content in body
	})
}


----------------



Tutorial 7: Thresholds
----------------------
Threshold is used to validate different response related time and other
Different between check and threshold is. check will validate and it will keep on running. In threshold it will fail if it reaches defined threshold
Mostly used for validating response time related
Threshold will be defined inside the options

Eg:
export const options = {
	thresholds: {
		http_req_duration: [{
		threshold: 'p(95) < 100',   //Here it will check whether 95th percentile of response time is less than 100 milli sec or not
		abortOnFail: true            //If above condition fail whether it should stop the test or not
		}]
	}
}

We have different metrics type
1. Counter - it shows sum of cumulative addition
2. Gauge   - It shows minimum, maximum and average value
3. Rate    - It is percentage
4. Trend   - It shows the calculative statisticks on the added value such as mininum, maximum, average and percentile
Below link will give more details about different metrics
https://k6.io/docs/using-k6/metrics/


one more example:
export const options = {
	thresholds: {
		http_req_blocked: [{      //http_req_blocked is one of the metrics
			threshold: 'max < 200',
			abortOnFail: true
		}],
		http_req_duration: [{      //http_req_duration is one of the metrics
			threshold: 'p(95) < 1000',
			abortOnFail: true
		}]
	}
}


we can type below command to get the status of last execution result (last exit code)
$LASTEXITCODE
//if it gives 0. then meaning it is pass.
//if it gives other than 0. 99 or any other meaning it failed



----------

Tutorial 8: Scenarios and Executors
------------------------------------

scenarios are used to create real world scenario of performance testing
We can  control number of vus and iterations
we can execute in parallel or sequence or both
We can also have multiple scenarios in one file to create real world scenarios

we need to add in options

Eg:
export const options = {
	scenarios : {
		my_scenario: {
			executor: 'shared-iterations',
			startTime: '10s',
			gracefulStop: '5s',
			vus: 10,
			iterations: 2,
			maxDuration: '10s',
		},
		another_scenario: {
		...
		... 
		}
	}
}



Different Executors:     //executors are  cpu of k6 work engine
1. shared-iterations
2. per-vu-iterations
3. constant-vus
4. ramping-vus
5. constant-arrival-rate
6. ramping-arrival-rate
7. externally-controlled

Mostly it will help to configure vus and iterations



Example of per-vu-iterations:
export const options = {
	scenarios: {
		my_per_vu_scenario: {   //as per below, Per virtual user will call 5. it will totally call 5 * 5 = 25 times
			executor: 'per-vu-iterations',
			vus: 5,
			iterations: 5,
			startTime: '3s'
		}
	}
}


Example of shared-iterations:
export const options = {
	scenarios: {
		my_shared_iterations_scenario: {   //as per below, iterarions will be splitted to given vus to share. it is 5/5=1 per each vu. totally 5 calls
			executor: 'shared-iterations',
			vus: 5,
			iterations: 5,
			startTime: '3s'
		}
	}
}


Example of constant-vus:
export const options = {
	scenarios: {
		my_constant_scenario: {   //here 5 uvs ( 5 users ) will call as many as possible iterations
			executor: 'constant-vus',
			vus: 5,
			duration: '5s',
			startTime: '0s'
		}
	}
}


Example of ramping-vus:
export const options = {
	scenarios: {
		my_ramping_scenario: { // as per below Here it will changes / increases the users (vus) and try to achive till given target number of user (5 users). it will start from 1 users and slowly increase the users till 5 users in given duration
			executor: 'ramping-vus',
			startTime: '0s',
			stages: [{
				target: 5,
				duration: '15s'
			}]
		}
	}
}


Example of constant-arrival-scenario:
export const options = {
	scenarios: {
		my_constant_arrival_scenario: {   //as per below, it will try to achive 5 iteration per sec. this also varies the uvs. can to till 10 users. but still try to keep average rate of 5
			executor: 'constant-arrival-rate',
			rate: 5,
			duration: '20s',
			preAllocatedVUs: 5,
			maxUVs: 10
		}
	}
}


Example of ramping-arrival-rate:
export const options = {
	scenarios: {
		my_ramping_arrival_rate_scenario: {  // as per below, it will start with 2 user per sec and try to reach target of 15 users per sec. It can go maximum of 30 userrs to achive target. We can have multiple target and its duration if needed
			executor: 'ramping-arrival-rate',
			startRate: 2,
			timeUnit: '1s',
			preAllocatedVUs: 2,
			maxVUs: 30,
			stages: [{
				target: 15,
				duration: '30s'
			}]
		}
	}
}


Example of externally-controlled-scenarios:
export const options: {
	scenarios: {
		my_external_control_scenario: {    // externally-controlled executor are used to control the externally using the command. we can rampup or rampdown the users (uvs) or other config etc
			executor: 'externally-controlled',
			vus: 10,
			maxVUs: 30,
			duration: '2m'
		}
	}
}
//we can test above by two terminal. one for running this file. and other for giving the k6 command to control
//using below command we can control when it was running
k6 status              - this will give status of current scenario
k6 scale --vus=15      - using scale command we can increase/decrease the users. here i have given 15 users. so it will increase from default 10 to 15
k6 scale --vus=1       - this will scale down from 15 to 1 user
k6 pause               - this is to pause the test
k6 resume              - this is to resume the test



-----------------


Tutorial 9: Metrics and outputs
--------------------------------

build in metrics
If need we can add our own custom metrics
We can see all the metrics in console/terminal once the test was completed
The metrics name starts with http_req are build in metrics


There four types of metrics available in k6. using this we can create our own custom metrics. custom metrics also shown in console or terminal post run along with default metrics
1. Counter - this will add the value(sum the value) and show the sum result
2. Gauge - this show only the last value along with minimum and maximum
3. Rate - this is used to show how many was pass and fail
4. Trend - this will show average, minimum, maximum, median, percentile of 90 and 95th of response time in milli sec.


Everything will be imported from k6/metrics
Eg:
import { Counter, Gauge, Rate, Trend } from 'k6/metrics';

To create new metrics:
const myMetrics = new(<metrics type>);
myMetrics.add(<value>)


By default k6 will show the metrics in console/terminal once the test was completed.
we can still push the metrics to csv or json or k6 cloud, grafana, aws cloudwatch, influxdb or anyother


Example:
import { Counter, Gauge, Rate, Trend } from 'k6/metrics';

const customTrend = new Trend("custom_duration");
const customCounter = new Counter("custom_counter");
const customGauge = new Gauge("custom_gauge");
const customRate = new Rate("custom_rate");



response.timing.duration - this will give response time
//we will add this in custom trend metrics
For custom trend metrics we will add the respone time (response.timing.duration)
Eg:
customTrend.add(response.timing.duration)


in counter we will add the value. Customer counter will be used to show sum
Eg:
customCounter.add(2)
customCounter.add(5)

in rate we will add true or false or 1 or 0. true or 1 means pass. false or 0 means fails. True and 1 are same pass. false and 0 are same fail
Eg:
customRate.add(0)
customRate.add(false)
customRate.add(1)
customRate.add(true)
this will show 50% pass

in gauge we will add the value. it will show last value along with min and max
Eg:
customGauge.add(1)
customGauge.add(5)
customGauge.add(10)
This will show 10. with min 1 and max 10



To run performance testing in k6 cloud use below command
k6 cloud filename.js
Eg:
k6 cloud tutorial9CustomMetrics.js
//It will give the link in console to view the performance result in cloud
//To view the custom metrics, we can click on analysis. 
//we can also compare result with old run by clicking compare result



Below command will run the test in local and show the result in k6 cloud
k6 run -o cloud filename.js
Eg:
k6 run -o cloud tutorial9CustomMetrics.js


K6 cloud will give details of existing run and ongoing run.
Able to get more details in k6 cloud

We can see below in k6 cloud result:
in performance view, it will show the metrics graph with response time and more
in thershold will get threshold result
in check we will get all checks result
in http, we will get url, scenarios, method, number of request, status code, min and max response time, avg response time and standard deviation
in analysis, we will get overview and customer metrics results
in script we can see the script which is executed
in logs we can see the console output





--------------------


comments:
--------
k6 run filename.js          - to run the tests
k6 cloud filename.js        - to run in k6 cloud
k6 run -o cloud filename.js - to in local and show the result in k6 cloud
k6 status                   - to show the status
k6 scale --vus=15           - to scale the virtual users to 15
k6 pause                    - to pause the execution
k6 resume                   - to resume the execution





Notes:
---

by default it will run on port 6565. to change the port use below command
Eg:
k6 run filename.js --address=:73833   //we can give any other port also if default 6565 is already used by some other

options - This is to give options related to run configuration and few validations
check - related to validations

-d 5s - to give duration in command line
-u 4   - to give number of user in command line


to run in rps and total duration, we can give like below

export const options = {
    rps: 3,                - 3 request per sec
    duration: '10s',       - total duration is 10 sec
  }







